name: Deploy Flask Todo App with ArgoCD and Akeyless

on:
  workflow_dispatch:
    inputs:
      app_name:
        required: true
        type: string
        default: "flask-todo"
      namespace:
        required: false
        type: string
        default: "flask-todo"
      db_name:
        required: true
        type: string
        default: "todos"
      akeyless_mysql_secret_name:
        required: true
        type: string
        default: "/demos/mysql_root_password"
      repo_name:
        required: true
        type: string
        default: "flask-todo-app"

env:
  ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
  AKEYLESS_ACCESS_ID: ${{ secrets.AKEYLESS_ACCESS_ID }}
  AKEYLESS_ACCESS_SECRET: ${{ secrets.AKEYLESS_ACCESS_SECRET }}
  PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  DYNAMIC_SECRET_TTL: "15"

jobs:
  deploy-flask-todo:
    runs-on: sam-desktop
    permissions:  # Add this section
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Flask app image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/flask-todo:latest

      - name: Create new repository
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.PERSONAL_ACCESS_TOKEN }}
          script: |
            // Create the repository
            await github.rest.repos.createForAuthenticatedUser({
              name: '${{ github.event.inputs.repo_name }}',
              private: true
            });

      - name: Configure package access
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.PERSONAL_ACCESS_TOKEN }}
          script: |
            // Add package access for the new repository
            await github.rest.packages.addRepositoryToPackageVisibilityLevel({
              package_type: 'container',
              package_name: 'flask-todo',
              repository: '${{ github.event.inputs.repo_name }}',
              visibility: 'private'
            });

      - name: Configure Akeyless CLI
        run: |
          akeyless configure --access-id "$AKEYLESS_ACCESS_ID" --access-key "$AKEYLESS_ACCESS_SECRET"

      - name: Retrieve MySQL root password and create Kubernetes Secret
        run: |
          SECRET_JSON=$(akeyless get-secret-value --name "${{ github.event.inputs.akeyless_mysql_secret_name }}")
          if ! MYSQL_ROOT_PASSWORD=$(echo "$SECRET_JSON" | jq -r .password); then
            echo "Failed to parse JSON, using raw secret value"
            MYSQL_ROOT_PASSWORD="$SECRET_JSON"
          fi
          
          if [ -z "$MYSQL_ROOT_PASSWORD" ]; then
            echo "Failed to retrieve MySQL root password"
            exit 1
          fi
          
          echo "MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD" >> $GITHUB_ENV
          
          # Create namespace if it doesn't exist
          kubectl create namespace ${{ github.event.inputs.namespace }} --dry-run=client -o yaml | kubectl apply -f -
          
          # Create the secret in the namespace
          kubectl create secret generic mysql-root-secret \
            --from-literal=mysql-root-password="$MYSQL_ROOT_PASSWORD" \
            --namespace=${{ github.event.inputs.namespace }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Prepare and push manifests
        run: |
          git config --global user.email "info@tekanaid.com"
          git config --global user.name "TeKanAid Automation"
          git clone https://x-access-token:${{ env.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository_owner }}/${{ github.event.inputs.repo_name }}.git
          cd ${{ github.event.inputs.repo_name }}
          
          # Copy and modify manifest files and source code
          cp -r ../k8s-manifests/* .
          cp -r ../app/ .
          cp -r ../tests/ .
          cp ../Dockerfile .
          cp ../requirements.txt .
          cp ../Pipfile .
          cp ../Pipfile.lock .
          cp ../run.py .
          rm ../README.md
          mv ../README-PythonApp.md ../README.md
          cp ../README.md .
          # Create GitHub Actions workflow directory
          mkdir -p .github/workflows
          cp ../flask-todo-app/.github/workflows/build-and-push.yml .github/workflows/
          cp ../flask-todo-app/.github/workflows/pr-validation.yml .github/workflows/
          
          # Update image reference in deployment
          sed -i 's#your-docker-registry/flask-app:latest#ghcr.io/${{ github.repository_owner }}/flask-todo:latest#g' flask-deployment.yaml
          
          # Replace placeholders
          sed -i 's/{{APP_NAME}}/${{ github.event.inputs.app_name }}/g' *.yaml
          sed -i 's/{{NAMESPACE}}/${{ github.event.inputs.namespace }}/g' *.yaml
          sed -i 's/{{DB_NAME}}/${{ github.event.inputs.db_name }}/g' *.yaml
          sed -i 's#{{AKEYLESS_MYSQL_SECRET_NAME}}#${{ github.event.inputs.akeyless_mysql_secret_name }}_dynamic#g' *.yaml
          sed -i 's/{{DYNAMIC_SECRET_TTL}}/${{ env.DYNAMIC_SECRET_TTL }}/g' *.yaml  # Add this line
          
          git add .
          git commit -m "Add Flask Todo app and MySQL manifests with Akeyless integration"
          git push

      - name: Create Kubernetes Secret for Gateway Certificate
        run: |
          kubectl create secret generic gateway-cert-secret \
            --from-file=gateway_cert.pem=./gateway_cert.pem \
            --namespace=${{ github.event.inputs.namespace }} \
            --dry-run=client -o yaml | kubectl apply -f -
      
      - name: Login to Argo CD
        run: argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USER }} --password ${{ secrets.ARGOCD_PASS }} --grpc-web --insecure
    
      - name: Register Repository in Argo CD
        run: argocd repo add https://github.com/${{ github.repository_owner }}/${{ github.event.inputs.repo_name }}.git --username ${{ github.repository_owner }} --password ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Create ArgoCD Application
        run: |
          argocd app create ${{ github.event.inputs.app_name }} \
            --repo https://github.com/${{ github.repository_owner }}/${{ github.event.inputs.repo_name }}.git \
            --path . \
            --dest-server https://kubernetes.default.svc \
            --dest-namespace ${{ github.event.inputs.namespace }} \
            --project default \
            --sync-policy automated \
            --sync-option CreateNamespace=true \
            --upsert \
            --grpc-web

      - name: Create Akeyless Target
        continue-on-error: true
        run: |
          # Wait a bit for DNS propagation
          sleep 20
          akeyless target create db \
            --name "${{ github.event.inputs.akeyless_mysql_secret_name }}_target" \
            --db-type mysql \
            --pwd "$MYSQL_ROOT_PASSWORD" \
            --host "mysql-${{ github.event.inputs.app_name }}.${{ github.event.inputs.namespace }}.svc.cluster.local" \
            --port 3306 \
            --user-name "root" \
            --db-name "${{ github.event.inputs.db_name }}"
          if [ $? -ne 0 ]; then
            echo "Note: Target creation failed because it already exists, but continuing with the workflow."
          fi

      - name: Create Akeyless Dynamic Secret
        continue-on-error: true
        run: |
          akeyless dynamic-secret create mysql \
            --name "${{ github.event.inputs.akeyless_mysql_secret_name }}_dynamic" \
            --target-name "${{ github.event.inputs.akeyless_mysql_secret_name }}_target" \
            --gateway-url ${{ env.AKEYLESS_GATEWAY_URL }} \
            --user-ttl "${{ env.DYNAMIC_SECRET_TTL }}s" \
            --mysql-statements "CREATE USER '{{name}}'@'%' IDENTIFIED WITH mysql_native_password BY '{{password}}' PASSWORD EXPIRE INTERVAL 30 DAY;GRANT ALL PRIVILEGES ON \`${{ github.event.inputs.db_name }}\`.* TO '{{name}}'@'%';" \
            --mysql-revocation-statements "REVOKE ALL PRIVILEGES, GRANT OPTION FROM '{{name}}'@'%'; DROP USER '{{name}}'@'%';" \
            --password-length 16
          if [ $? -ne 0 ]; then
            echo "Note: Dynamic Secret creation failed because it already exists, but continuing with the workflow."
          fi
        env:
          AKEYLESS_GATEWAY_URL: 'https://192.168.1.82:8080'
          AKEYLESS_TRUSTED_TLS_CERTIFICATE_FILE: './gateway_cert.pem'

      - name: Trigger ArgoCD sync
        run: |
          argocd app sync ${{ github.event.inputs.app_name }}

      # - name: Update Port
      #   uses: port-labs/port-github-action@v1
      #   with:
      #     identifier: ${{ github.event.inputs.app_name }}
      #     title: ${{ github.event.inputs.app_name }}
      #     blueprint: service
      #     properties: |
      #       {
      #         "name": "${{ github.event.inputs.app_name }}",
      #         "namespace": "${{ github.event.inputs.namespace }}",
      #         "database": "${{ github.event.inputs.db_name }}",
      #         "akeylessMysqlSecret": "${{ github.event.inputs.akeyless_mysql_secret_name }}_dynamic",
      #         "repository": "${{ github.event.inputs.repo_name }}"
      #       }
      #     relations: {}
      #     clientId: ${{ secrets.PORT_CLIENT_ID }}
      #     clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
      #     baseUrl: https://api.getport.io
      #     runId: ${{fromJson(github.event.inputs.port_payload).context.runId}}}


